Ниже представлен подробный обзор проекта «Кулинарный блог», начиная с технического задания, которое вы предоставили, и далее описывается архитектура системы, функциональные возможности, проектирование базы данных и административный функционал.

---

## 1. Техническое задание

**Название курса:** Распределенные системы обработки данных  
**Студент:** гр. ПИН-122  
**Тема курсовой работы:** Распределенная ИС «Кулинарный блог»  
**Срок сдачи проекта:** 16 мая 2025 г.

**Задание:**  
Разработать распределенную информационную систему для автоматизации предметной области с использованием веб-фреймворка Django. Программный продукт представляет собой сервис для размещения кулинарных постов, где:
- **Администратор** реализует CRUD-методы обработки данных, управляет контентом, устанавливает правила модерации и может формировать сводные отчеты.
- **Пользователь (автор)** может зарегистрироваться, создавать рецепты (посты), а пользователи — подписываться на авторов, ставить лайки, оставлять комментарии.
- **Основные требования:**  
  a) Интерфейс и функционал зависят от роли (администратор, автор, обычный пользователь);  
  b) Адаптивный интерфейс;  
  c) Валидация данных на стороне клиента и сервера;  
  d) Формирование отчетов (Excel, PDF);  
  e) Отправка уведомлений по e-mail.

Дополнительно:  
- Авторы могут иметь аватарки, посты — фотографии;  
- Пользовательская лента должна формироваться из постов подписанных авторов, а в отсутствие подписок (или при неавторизованном доступе) – по релевантности (популярное, основанное на лайках, просмотрах, комментариях).  
- Необходима проработка расширенного функционала: подписки, сортировка, категории/теги, аналитика, медиа-контент.

---

## 2. Общая концепция проекта

### Функциональные группы

1. **Пользовательская часть (Frontend на React):**
   - Регистрация, авторизация, профиль пользователя.
   - Создание и редактирование рецептов (постов) для авторов.
   - Лента постов:
     - Для авторизованных пользователей – посты от подписанных авторов.
     - Для неавторизованных или без подписок – сортировка по релевантности (популярные посты).
   - Возможность подписываться на авторов и теги.
   - Просмотр подробной информации о рецептах, лайки, комментарии (с возможностью вложенных ответов).

2. **Бэкенд (Django):**
   - Реализация API для всех операций (авторизация, CRUD для постов, управление подписками, лайками, комментариями и тегами).
   - Расширенная модель данных для поддержки всех сценариев.
   - Модуль формирования отчетов (Excel/PDF) и отправки уведомлений (email).
   - Распределенная архитектура, позволяющая масштабировать обработку запросов (например, через микросервисы для аналитики, уведомлений).

3. **Административная панель:**
   - Модерация пользователей и контента.
   - Управление публикациями, тегами, категориями и медиа.
   - Аналитика активности, составление отчетов и аудит действий.
   - Настройки системы, включая интеграцию с внешними сервисами.

---

## 3. Проектирование базы данных и связи между таблицами

### 3.1 Основные сущности и связи

#### 3.1.1 Таблица **User**
- **Поля:**  
  `id`, `username`, `email`, `password`, `role` (admin/author), `avatar` (ссылка на изображение)  
- **Связи:**  
  - Один пользователь может создавать множество постов.  
  - Пользователь участвует в подписках (самоссылочная связь через таблицу **Subscription**).  
  - Пользователь ставит лайки (связь с таблицей **Like**).  
  - Пользователь оставляет комментарии (связь с таблицей **Comment**).  
  - (Опционально) Пользователь может подписываться на теги через **TagSubscription**.

#### 3.1.2 Таблица **Subscription**
- **Поля:**  
  `id`, `subscriber_id` (владелец подписки), `author_id` (на кого подписываются), `created_at`
- **Особенности:**  
  - Уникальное ограничение на пару (`subscriber_id`, `author_id`).

#### 3.1.3 Таблица **Post**
- **Поля:**  
  `id`, `title`, `slug`, `content`, `instructions`, `cooking_method`, `status` (draft/published),  
  `created_at`, `updated_at`, `published_at`, `views`, `cover_image` (главное фото поста),  
  `author_id` (внешний ключ на User)
- **Связи:**  
  - Один пост принадлежит одному автору.  
  - Пост может иметь множество тегов (связь через таблицу **PostTag**).  
  - Пост использует ингредиенты (связь через таблицу **PostIngredient**).  
  - Пост получает лайки (связь с таблицей **Like**).  
  - Пост имеет комментарии (связь с таблицей **Comment**).  
  - (Опционально) Дополнительные медиа (через таблицу **Media**).

#### 3.1.4 Таблица **Tag**
- **Поля:**  
  `id`, `name`
- **Связи:**  
  - Многие посты могут иметь один тег (связь через таблицу **PostTag**).  
  - (Опционально) Пользователи могут подписываться на теги через **TagSubscription**.

#### 3.1.5 Таблица **PostTag**
- **Поля:**  
  `id`, `post_id`, `tag_id`
- **Особенности:**  
  - Уникальное ограничение на комбинацию (`post_id`, `tag_id`).

#### 3.1.6 Таблица **Ingredient**
- **Поля:**  
  `id`, `name` (возможно, дополнительные поля – описание, пищевая ценность и т.д.)
- **Связи:**  
  - Ингредиенты связываются с постами через таблицу **PostIngredient**.

#### 3.1.7 Таблица **PostIngredient**
- **Поля:**  
  `id`, `post_id`, `ingredient_id`, `quantity`, `measurement_unit`
- **Особенности:**  
  - Уникальное ограничение на пару (`post_id`, `ingredient_id`).

#### 3.1.8 Таблица **Like**
- **Поля:**  
  `id`, `user_id`, `post_id`, `created_at`
- **Особенности:**  
  - Уникальное ограничение на пару (`user_id`, `post_id`).

#### 3.1.9 Таблица **Comment**
- **Поля:**  
  `id`, `user_id`, `post_id`, `parent_id` (для вложенности, может быть NULL), `content`, `created_at`
- **Особенности:**  
  - Самоссылочная связь через `parent_id` для организации вложенных комментариев.

#### 3.1.10 Таблица **Media** (опционально)
- **Поля:**  
  `id`, `post_id`, `file` (ссылка или путь к файлу), `media_type` (изображение, видео), `created_at`
- **Связи:**  
  - Один пост может иметь множество медиа-объектов.

#### 3.1.11 Таблица **TagSubscription** (опционально)
- **Поля:**  
  `id`, `user_id`, `tag_id`, `created_at`
- **Особенности:**  
  - Уникальное ограничение на пару (`user_id`, `tag_id`).

---

### 3.2 Итоговая диаграмма связей (текстовое описание)

- **User:**  
  ↳ Один-ко-многим с **Post** (через `author_id`).  
  ↳ Один-ко-многим с **Like** (через `user_id`).  
  ↳ Один-ко-многим с **Comment** (через `user_id`).  
  ↳ Многие-ко-многим (self-referential) через **Subscription** (подписки и фолловеры).  
  ↳ (Опционально) Многие-ко-многим с **Tag** через **TagSubscription**.

- **Post:**  
  ↳ Принадлежит **User** (автор).  
  ↳ Многие-ко-многим с **Tag** через **PostTag**.  
  ↳ Многие-ко-многим с **Ingredient** через **PostIngredient**.  
  ↳ Один-ко-многим с **Like** (через `post_id`).  
  ↳ Один-ко-многим с **Comment** (через `post_id`).  
  ↳ (Опционально) Один-ко-многим с **Media**.

- **Tag:**  
  ↳ Многие-ко-многим с **Post** через **PostTag**.  
  ↳ (Опционально) Многие-ко-многим с **User** через **TagSubscription**.

- **Ingredient:**  
  ↳ Многие-ко-многим с **Post** через **PostIngredient**.

- **Comment:**  
  ↳ Самоссылочная связь через `parent_id` для создания дерева комментариев.

---

## 4. Административная часть

**Администратор** имеет расширенный функционал для контроля и управления платформой:

1. **Управление пользователями:**
   - Просмотр и редактирование профилей, включая смену аватарок.
   - Назначение ролей, блокировка/удаление пользователей, аудит активности.

2. **Управление контентом:**
   - Модерация и редактирование постов (изменение контента, тегов, изображений).
   - Управление статусом публикаций: перевод из черновика в опубликованное, отклонение или архивирование.
   - Планирование публикаций (отложенный запуск, календарь публикаций).

3. **Модерация медиа-контента:**
   - Контроль загрузки изображений и видео (проверка соответствия требованиям, удаление неподобающих материалов).

4. **Управление тегами и категориями:**
   - Создание, редактирование, объединение и удаление тегов.
   - Модерация подписок на теги (если реализована такая функциональность).

5. **Управление комментариями:**
   - Просмотр и модерация комментариев (одобрение, редактирование, удаление).
   - Работа с вложенными комментариями (отслеживание ответов, корректировка при необходимости).

6. **Аналитика и отчеты:**
   - Сбор и анализ статистики: просмотры, лайки, комментарии, подписки.
   - Генерация отчетов (в PDF или Excel) для анализа активности пользователей и популярности контента.

7. **Системное администрирование:**
   - Настройка общих параметров сайта: темы оформления, кэширование, параметры уведомлений.
   - Интеграция с внешними сервисами (соцсети, платежные системы, аналитика).
   - Журналирование системных событий и действий администраторов для аудита и безопасности.

---

## 5. Общая архитектура проекта

- **Frontend (React):**  
  - Адаптивный интерфейс, зависящий от роли пользователя (администратор, автор, обычный пользователь).  
  - Динамическая лента, фильтрация и сортировка постов, форма для создания/редактирования рецептов с валидацией на клиенте.

- **Backend (Django + DRF):**  
  - REST API для всех операций: аутентификация, CRUD для постов, управление подписками, лайками, комментариями.  
  - Валидация данных на уровне сервера, обработка бизнес-логики (например, формирование ленты, агрегация статистики).  
  - Модули для формирования отчетов, отправки уведомлений и интеграции с распределенными системами (при необходимости).

- **База данных:**  
  - Подробно спроектированная схема с продуманными связями, обеспечивающая целостность данных и масштабируемость.  
  - Оптимизация через индексацию, агрегационные поля и, при необходимости, кэширование для повышения производительности.

- **Административная панель:**  
  - Интерфейс для администраторов, включающий инструменты модерации, аналитики и настройки системы.

---

## Итог

Проект «Кулинарный блог» представляет собой комплексную распределённую систему, где:

- **Техническое задание** задает цели и сроки, требуя гибкой архитектуры с ролью администратора, авторов и пользователей.
- **База данных** спроектирована с учётом всех необходимых сущностей (пользователи, подписки, посты, теги, ингредиенты, лайки, комментарии, медиа) и продуманными связями для обеспечения целостности, масштабируемости и возможности агрегирования данных.
- **Функционал для пользователей** включает персонализированную ленту (на основе подписок и релевантности), создание рецептов, систему лайков, комментариев и подписок.
- **Административная часть** предоставляет инструменты для контроля контента, управления пользователями, модерации комментариев, контроля медиа-контента и аналитики.
- **Интеграция фронтенда и бэкенда** через REST API позволяет создать адаптивное приложение, способное работать в распределённой среде с возможностью дальнейшего масштабирования и интеграции с внешними системами.

Такой проект соответствует заявленным требованиям курсовой работы по распределённым системам обработки данных, обеспечивая гибкость, масштабируемость и возможность дальнейшего развития функционала в зависимости от требований бизнеса.